import logging
import asyncio
from uuid import uuid4
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    InputMediaDocument
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_GROUP_ID = -4868585948  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
BOT_TOKEN = '7960897434:AAEPGs7R10CrWiYDCQOFI0wDEC0ytWkmYv8'  # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
ticket_user_map = {}  # {ticket_id: user_chat_id}
user_tickets = {}     # {user_id: {ticket_id: ticket_data}}
active_tickets = {}   # {ticket_id: ticket_data}
user_descriptions = {} # {user_id: {'text': description, 'files': []}}

class TicketStatus:
    ACTIVE = "active"
    CLOSED = "closed"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–≠–î–û", callback_data="edo"),
         InlineKeyboardButton("–°—á–µ—Ç–∞", callback_data="scheta")],
        [InlineKeyboardButton("–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_tickets")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "edo":
        keyboard = [
            [InlineKeyboardButton("–£–¢–õ", callback_data="utl"),
             InlineKeyboardButton("–õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data="logistika")],
            [InlineKeyboardButton("–ú–ü–ò", callback_data="mpi"),
             InlineKeyboardButton("–§–§", callback_data="ff")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:', reply_markup=reply_markup)

    elif data == "scheta":
        keyboard = [
            [InlineKeyboardButton("–£–¢–õ", callback_data="scheta_utl"),
             InlineKeyboardButton("–õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data="scheta_logistika")],
            [InlineKeyboardButton("–ú–ü–ò", callback_data="scheta_mpi"),
             InlineKeyboardButton("–§–§", callback_data="scheta_ff")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏:', reply_markup=reply_markup)

    elif data.startswith("scheta_"):
        category_key = data.replace("scheta_", "")
        category_map = {
            "utl": "–£–¢–õ",
            "logistika": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
            "mpi": "–ú–ü–ò",
            "ff": "–§–§"
        }
        category_name = category_map[category_key]
        keyboard = [
            [InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data=f"create_invoice_{category_key}"),
             InlineKeyboardButton("–°—á–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω\n–°—Ä–æ—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞", callback_data=f"check_invoice_{category_key}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="scheta")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    elif data == "my_tickets":
        await show_user_tickets(query, update.effective_user.id)

    elif data in ["back_to_main", "back"]:
        await start(update, context)

    elif data.startswith("close_ticket_"):
        ticket_id = data.replace("close_ticket_", "")
        await close_ticket(ticket_id, query)

    elif data in ["utl", "logistika", "mpi", "ff"]:
        category_map = {
            "utl": "–£–¢–õ",
            "logistika": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
            "mpi": "–ú–ü–ò",
            "ff": "–§–§"
        }
        category_name = category_map[data]
        keyboard = [
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"{data}_send_docs"),
             InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"{data}_receive_docs")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_edo")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–í–∞—à –≤—ã–±–æ—Ä: {category_name}. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=reply_markup)

    elif data == "back_to_edo":
        keyboard = [
            [InlineKeyboardButton("–£–¢–õ", callback_data="utl"),
             InlineKeyboardButton("–õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data="logistika")],
            [InlineKeyboardButton("–ú–ü–ò", callback_data="mpi"),
             InlineKeyboardButton("–§–§", callback_data="ff")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:', reply_markup=reply_markup)

    elif "_send_docs" in data or "_receive_docs" in data or "create_invoice_" in data or "check_invoice_" in data:
        if "_send_docs" in data or "_receive_docs" in data:
            parts = data.split('_')
            category_key = parts[0]
            action_type = parts[1]
            action_text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã' if action_type == 'send' else '–ü—Ä–∏–Ω—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã'
            ticket_type = '–≠–î–û'
        else:
            parts = data.split('_')
            category_key = parts[2]
            action_type = parts[0] + '_' + parts[1]
            action_text = '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π' if parts[0] == 'create' else '–°—á–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω'
            ticket_type = '–°—á–µ—Ç–∞'

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞—è–≤–∫–∏
        unique_id = str(uuid4())
        user_id = update.effective_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å ticket_id –∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ticket_user_map[unique_id] = user_id

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞—è–≤–∫–µ
        ticket_data = {
            "id": unique_id,
            "user_id": user_id,
            "user_name": update.effective_user.full_name,
            "username": update.effective_user.username or '–ù–µ—Ç username',
            "category": category_key,
            "action": action_text,
            "type": ticket_type,
            "status": TicketStatus.ACTIVE,
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "closed_at": None,
            "description": None,
            "files": []
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö
        active_tickets[unique_id] = ticket_data
        if user_id not in user_tickets:
            user_tickets[user_id] = {}
        user_tickets[user_id][unique_id] = ticket_data

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ñ–∞–π–ª–æ–≤
        user_descriptions[user_id] = {
            'ticket_id': unique_id,
            'text': None,
            'files': []
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['unique_id'] = unique_id
        context.user_data['category'] = category_key
        context.user_data['action'] = action_text
        context.user_data['ticket_type'] = ticket_type

        await query.answer()
        await query.edit_message_text(
            f'''–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!
üÜî –ó–∞—è–≤–∫–∞ ID: {unique_id}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.full_name} (@{update.effective_user.username or '–ù–µ—Ç username'}, ID: {update.effective_user.id})
üìÇ –¢–∏–ø: {ticket_type}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_key}
üìÇ –§—É–Ω–∫—Ü–∏—è: {action_text}

–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏/–∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è'''
        )
    else:
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def show_user_tickets(query, user_id):
    if user_id not in user_tickets or not user_tickets[user_id]:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    active_tickets_list = [t for t in user_tickets[user_id].values() if t['status'] == TicketStatus.ACTIVE]
    
    if not active_tickets_list:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    message = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
    for ticket in active_tickets_list:
        message += (
            f"üÜî ID: {ticket['id']}\n"
            f"üìÇ –¢–∏–ø: {ticket.get('type', '–≠–î–û')}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket['category']}\n"
            f"üìå –î–µ–π—Å—Ç–≤–∏–µ: {ticket['action']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ticket.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            f"üïí –°–æ–∑–¥–∞–Ω–∞: {ticket['created_at']}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    await query.edit_message_text(message)

async def close_ticket(ticket_id, query):
    if ticket_id not in active_tickets:
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞", show_alert=True)
        return

    ticket = active_tickets[ticket_id]
    ticket['status'] = TicketStatus.CLOSED
    ticket['closed_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await query.bot.send_message(
            chat_id=ticket['user_id'],
            text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ {ticket_id} –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.\n\n"
                 f"üìÇ –¢–∏–ø: {ticket.get('type', '–≠–î–û')}\n"
                 f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket['category']}\n"
                 f"üìå –î–µ–π—Å—Ç–≤–∏–µ: {ticket['action']}\n"
                 f"üïí –ó–∞–∫—Ä—ã—Ç–∞: {ticket['closed_at']}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    del active_tickets[ticket_id]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ user_tickets
    if ticket['user_id'] in user_tickets and ticket_id in user_tickets[ticket['user_id']]:
        user_tickets[ticket['user_id']][ticket_id]['status'] = TicketStatus.CLOSED
        user_tickets[ticket['user_id']][ticket_id]['closed_at'] = ticket['closed_at']

    await query.answer(f"–ó–∞—è–≤–∫–∞ {ticket_id} –∑–∞–∫—Ä—ã—Ç–∞", show_alert=True)
    await query.message.reply_text(f"–ó–∞—è–≤–∫–∞ {ticket_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_descriptions:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
        await start(update, context)
        return

    unique_id = user_descriptions[user_id]['ticket_id']
    ticket_data = active_tickets.get(unique_id)
    
    if not ticket_data:
        await update.message.reply_text('–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if update.message.text:
        user_descriptions[user_id]['text'] = update.message.text
        ticket_data['description'] = update.message.text
        if user_id in user_tickets and unique_id in user_tickets[user_id]:
            user_tickets[user_id][unique_id]['description'] = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    file_id = None
    if update.message.document:
        file_id = update.message.document.file_id
    elif update.message.photo:
        file_id = update.message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    
    if file_id:
        user_descriptions[user_id]['files'].append(file_id)
        ticket_data['files'] = user_descriptions[user_id]['files']
        if user_id in user_tickets and unique_id in user_tickets[user_id]:
            user_tickets[user_id][unique_id]['files'] = user_descriptions[user_id]['files']

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    if user_descriptions[user_id]['text'] or user_descriptions[user_id]['files']:
        await send_full_ticket_to_admin(update, context, unique_id, user_id)
    else:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ')

async def send_full_ticket_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, ticket_id: str, user_id: int):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    ticket_data = active_tickets.get(ticket_id)
    if not ticket_data:
        await update.message.reply_text('–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–∞–π–ª—ã
    description_data = user_descriptions.get(user_id, {})
    description_text = description_data.get('text', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
    files = description_data.get('files', [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    message_text = (
        f"<b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ</b>\n"
        f"<b>üÜî –ó–∞—è–≤–∫–∞ ID:</b> {ticket_id}\n"
        f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {ticket_data['user_name']} (@{ticket_data['username']}, ID: {user_id})\n"
        f"<b>üìÇ –¢–∏–ø:</b> {ticket_data['type']}\n"
        f"<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {ticket_data['category']}\n"
        f"<b>üìÇ –§—É–Ω–∫—Ü–∏—è:</b> {ticket_data['action']}\n"
        f"<b>üí¨ –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description_text}\n"
        f"<b>üìé –§–∞–π–ª—ã:</b> {len(files)} —à—Ç."
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    close_button = InlineKeyboardButton(
        "–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", 
        callback_data=f"close_ticket_{ticket_id}"
    )
    reply_markup = InlineKeyboardMarkup([[close_button]])

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö —Å —Ç–µ–∫—Å—Ç–æ–º
        if files:
            media_group = []
            # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥–ø–∏—Å—å —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞—è–≤–∫–∏
            for i, file_id in enumerate(files[:10]):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram - 10 —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
                if i == 0:
                    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    if update.message.document:
                        media_group.append(InputMediaDocument(media=file_id, caption=message_text, parse_mode='HTML'))
                    elif update.message.photo:
                        media_group.append(InputMediaPhoto(media=file_id, caption=message_text, parse_mode='HTML'))
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    if update.message.document:
                        media_group.append(InputMediaDocument(media=file_id))
                    elif update.message.photo:
                        media_group.append(InputMediaPhoto(media=file_id))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
            await context.bot.send_media_group(
                chat_id=ADMIN_GROUP_ID,
                media=media_group
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await context.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=f"üÜî –ó–∞—è–≤–∫–∞ ID: {ticket_id}",
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
            await context.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É.\n–ú—ã —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã!'
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in user_descriptions:
            del user_descriptions[user_id]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ
        await start(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text('‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.')

async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    
    if len(args) < 2:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <ID_–∑–∞—è–≤–∫–∏> <–≤–∞—à –æ—Ç–≤–µ—Ç>')
        return
    
    ticket_id_input = args[0]
    response_text = ' '.join(args[1:])
    
    user_chat_id = ticket_user_map.get(ticket_id_input)
    
    if not user_chat_id:
        await update.message.reply_text('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –∑–∞—è–≤–∫–∏.')
        return
    
    try:
        await context.bot.send_message(
            chat_id=user_chat_id,
            text=f'üì© –û—Ç–≤–µ—Ç –æ—Ç –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏:\n\n{response_text}'
        )
        await update.message.reply_text('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.')

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("reply", reply_command))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–ª–æ–∂–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT | filters.PHOTO | filters.Document.ALL, 
        handle_user_message
    ))
    
    application.run_polling()

if __name__ == '__main__':
    main()