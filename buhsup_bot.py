import logging
import asyncio
from uuid import uuid4
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_GROUP_ID = -4908403310  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
BOT_TOKEN = '7960897434:AAEPGs7R10CrWiYDCQOFI0wDEC0ytWkmYv8'  # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–≤—è–∑–∏ ticket_id –∏ user_chat_id
ticket_user_map = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–≠–î–û", callback_data="edo"),
         InlineKeyboardButton("–°—á–µ—Ç–∞", callback_data="scheta")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "edo":
        keyboard = [
            [InlineKeyboardButton("–£–¢–õ", callback_data="utl"),
             InlineKeyboardButton("–õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data="logistika")],
            [InlineKeyboardButton("–ú–ü–ò", callback_data="mpi"),
             InlineKeyboardButton("–§–§", callback_data="ff")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:', reply_markup=reply_markup)

    elif data in ["utl", "logistika", "mpi", "ff"]:
        category_map = {
            "utl": "–£–¢–õ",
            "logistika": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
            "mpi": "–ú–ü–ò",
            "ff": "–§–§"
        }
        category_name = category_map[data]
        keyboard = [
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"{data}_send_docs"),
             InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"{data}_receive_docs")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–í–∞—à –≤—ã–±–æ—Ä: {category_name}. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=reply_markup)

    elif "_send_docs" in data or "_receive_docs" in data:
        parts = data.split('_')
        category_key = parts[0]
        action_type = parts[1]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞—è–≤–∫–∏
        unique_id = str(uuid4())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å ticket_id –∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_chat_id = update.effective_user.id
        ticket_user_map[unique_id] = user_chat_id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['unique_id'] = unique_id
        context.user_data['category'] = category_key
        context.user_data['action'] = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã' if action_type == 'send' else '–ü—Ä–∏–Ω—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã'

        await query.answer()
        await query.edit_message_text(
            f'''–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!
üÜî –ó–∞—è–≤–∫–∞ ID: {unique_id}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.full_name} (@{update.effective_user.username or '–ù–µ—Ç username'}, ID: {update.effective_user.id})
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_key}
üìÇ –§—É–Ω–∫—Ü–∏—è: {context.user_data['action']}

–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ).'''
        )
    else:
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    description = update.message.text or ''
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    file_ids = []

    if update.message.photo:
        largest_photo = update.message.photo[-1]
        file_ids.append(largest_photo.file_id)

    if update.message.document:
        file_ids.append(update.message.document.file_id)

    files_attached = len(file_ids) > 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    unique_id = context.user_data.get('unique_id', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
    category = context.user_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    action_type = context.user_data.get('action', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

    user_full_name = update.effective_user.full_name
    username_or_none = update.effective_user.username or '–ù–µ—Ç username'

    message_text = (
        f"<b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ</b>\n"
        f"<b>üÜî –ó–∞—è–≤–∫–∞ ID:</b> {unique_id}\n"
        f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_full_name} (@{username_or_none}, ID: {update.effective_user.id})\n"
        f"<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        f"<b>üìÇ –§—É–Ω–∫—Ü–∏—è:</b> {action_type}\n"
        f"<b>üí¨ –ó–∞—è–≤–∫–∞:</b>\n{description}"
    )

    if not files_attached:
        message_text += "\n<b>üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç:</b> –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É/–≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=message_text,
            parse_mode='HTML'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if files_attached:
            media_group = [InputMediaPhoto(media=fid) for fid in file_ids]
            await context.bot.send_media_group(chat_id=ADMIN_GROUP_ID, media=media_group)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            '–í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—é.\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ üôå'
        )
        
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
         await update.message.reply_text('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.')

async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–æ–º–∞–Ω–¥–∞ /reply <ID>
    
    args = context.args  # –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    
    if len(args) < 2:
       await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply <ID> <–≤–∞—à –æ—Ç–≤–µ—Ç>')
       return
    
    ticket_id_input = args[0]
    
    response_text = ' '.join(args[1:])
    
    user_chat_id = ticket_user_map.get(ticket_id_input)
    
    if not user_chat_id:
       await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º ID.')
       return
    
    try:
       await context.bot.send_message(
           chat_id=user_chat_id,
           text=f'üìå –û—Ç–≤–µ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{response_text}'
       )
       await update.message.reply_text('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
    except Exception as e:
       logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
       await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')

def main():
   application = ApplicationBuilder().token(BOT_TOKEN).build()

   application.add_handler(CommandHandler("start", start))
   application.add_handler(CallbackQueryHandler(button_handler))
   application.add_handler(CommandHandler("reply", reply_command))
   
   # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã)
   application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_user_message))
   application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_user_message))
   
   application.run_polling()

if __name__ == '__main__':
   main()