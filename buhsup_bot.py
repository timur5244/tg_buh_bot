import logging
from uuid import uuid4
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

ADMIN_GROUP_ID = -4908403310 # –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤—å—Ç–µ id –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
BOT_TOKEN = '7960897434:AAEPGs7R10CrWiYDCQOFI0wDEC0ytWkmYv8'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–≠–î–û", callback_data="edo"), InlineKeyboardButton("–°—á–µ—Ç–∞", callback_data="scheta")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "edo":
        keyboard = [
            [InlineKeyboardButton("–£–¢–õ", callback_data="utl"),
             InlineKeyboardButton("–õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data="logistika"),
             InlineKeyboardButton("–ú–ü–ò", callback_data="mpi"),
             InlineKeyboardButton("–§–§", callback_data="ff")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    elif query.data in ["utl", "logistika", "mpi", "ff"]:
        category = {"utl": "–£–¢–õ", "logistika": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞", "mpi": "–ú–ü–ò", "ff": "–§–§"}.get(query.data)
        keyboard = [
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"{category}_send_docs"),
             InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"{category}_receive_docs")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–í–∞—à –≤—ã–±–æ—Ä: {category}. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=reply_markup)
    else:
        await query.edit_message_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def receive_documents_or_send_docs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data.split('_')
    category = data[0]
    function = {'send_docs': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'receive_docs': '–ü—Ä–∏–Ω—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã'}
    
    user_id = update.effective_user.id
    username = update.effective_user.username or f"User_{user_id}"
    unique_id = str(uuid4())
    
    context.user_data['unique_id'] = unique_id
    context.user_data['category'] = category
    context.user_data['function'] = function[data[1]]
    
    await query.answer()
    await query.edit_message_text(
        text=f'''
–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!
üÜî –ó–∞—è–≤–∫–∞ ID: {unique_id}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({user_id})
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –≠–î–û => {category}
üìÇ –§—É–Ω–∫—Ü–∏—è: {context.user_data["function"]}

–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
''',
        parse_mode='MarkdownV2'
    )

async def handle_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    request_description = update.message.text.strip() if update.message.text else ''
    file_ids = []
    media_group = None
    
    for attachment in update.message.media_group_identities():
        if isinstance(attachment, list):
            file_ids.extend([item.file_id for item in attachment])
        else:
            file_ids.append(attachment.file_id)
        
    files_attached = len(file_ids) > 0
    
    message_to_admins = (
        f'<b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n'
        f'üÜî –ó–∞—è–≤–∫–∞ ID:</b> {context.user_data["unique_id"]}\n'
        f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {update.effective_user.full_name} (@{update.effective_user.username}, ID: {update.effective_user.id})\n'
        f'<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> –≠–î–û => {context.user_data["category"]}\n'
        f'<b>üìÇ –§—É–Ω–∫—Ü–∏—è:</b> {context.user_data["function"]}\n'
        f'<b>üí¨ –ó–∞—è–≤–∫–∞:</b>\n{request_description}'
    )
    
    if not files_attached:
        message_to_admins += '\n<b>üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç:</b> –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
    else:
        message_to_admins += '\n<b>üñºÔ∏è –§–∞–π–ª—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.</b>'
    
    try:
        admin_reply = await context.bot.send_message(chat_id=ADMIN_GROUP_ID,
                                                    text=message_to_admins,
                                                    parse_mode='HTML')
        
        if files_attached:
            await context.bot.send_media_group(chat_id=ADMIN_GROUP_ID,
                                              media=[InputMediaPhoto(media=file_id) for file_id in file_ids])
            
        await update.message.reply_text(
            '''
–í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ üôå
''',
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logger.error(e)
        await update.message.reply_text('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.')

async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = update.message.text.split()
    command = parts.pop(0)[len('/reply'):]
    ticket_id = command.strip()
    response = ' '.join(parts)
    
    original_ticket_message = await context.bot.forward_message(chat_id=update.effective_chat.id,
                                                               from_chat_id=ADMIN_GROUP_ID,
                                                               message_id=update.message.reply_to_message.message_id)
    
    await context.bot.send_message(chat_id=original_ticket_message.forward_from.id,
                                   text=f'''üìå –û—Ç–≤–µ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{response}''',
                                   parse_mode='MarkdownV2')

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND | filters.ATTACHMENT, receive_documents_or_send_docs))
    application.add_handler(MessageHandler((filters.TEXT | filters.ATTACHMENT), handle_request))
    application.add_handler(MessageHandler(filters.REPLY & filters.Regex(r'^/reply'), reply_to_user))

    application.run_polling()

if __name__ == '__main__':
    main()